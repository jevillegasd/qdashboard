[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qdashboard"
dynamic = ["version"]
description = "A professional quantum computing dashboard with file browsing, experiment monitoring, QPU status tracking, and report visualization capabilities"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "TII Quantum Team", email = "quantum@tii.ae"}
]
maintainers = [
    {name = "TII Quantum Team", email = "quantum@tii.ae"}
]
keywords = [
    "quantum", 
    "quantum-computing", 
    "dashboard", 
    "qibo", 
    "qibolab", 
    "qibocal", 
    "monitoring", 
    "slurm", 
    "flask"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: System :: Monitoring",
    "Framework :: Flask"
]

dependencies = [
    "flask>=3.0.0",
    "humanize>=4.0.0",
    "pathlib2>=2.3.0",
    "werkzeug>=3.0.0",
    "PyYAML>=6.0.0",
]

[project.optional-dependencies]
# Quantum computing dependencies (optional but recommended)
quantum = [
    "qibo>=0.2.0",
    "qibolab>=0.1.0",
    "qibocal>=0.0.1"
]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0"
]
# All optional dependencies
all = [
    "qdashboard[quantum,dev]"
]

[project.urls]
Homepage = "https://github.com/qiboteam/qdashboard"
Documentation = "https://github.com/qiboteam/qdashboard#readme"
Repository = "https://github.com/qiboteam/qdashboard.git"
"Bug Tracker" = "https://github.com/qiboteam/qdashboard/issues"

[project.scripts]
qdashboard = "qdashboard.cli:main"
qdashboard-server = "qdashboard.cli:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["qdashboard*"]
exclude = ["tests*", "build*", "dist*"]

[tool.setuptools.package-data]
"*" = [
    "templates/*.html",
    "assets/css/*.css", 
    "assets/js/*.js",
    "assets/fonts/*",
    "assets/fonts/jquery.filer-icons/*"
]

[tool.setuptools.dynamic]
version = {attr = "qdashboard.__version__"}

# Black code formatter configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy type checker configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "build/",
    "dist/"
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["qdashboard"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
